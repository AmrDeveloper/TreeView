{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TreeView","text":"<p>Multi Roots TreeView implementation for Android Platform with a lot of options and customization</p>"},{"location":"#features","title":"Features:","text":"<pre><code>- No Custom Views.\n- Easy use, customize and extend.\n- Support any number of roots.\n- Can use a different design for each node.\n- Selection mode for nodes.\n- Dynamic adding and removing nodes.\n- Don't save a reference for the view holder in each node.\n- Can handle a large number of nodes without problems.\n- Providing on click and on long click listener nodes.\n- Easy to override any operations by override `TreeNodeManager`.\n- Collapse and Extend node and node branch.\n- Collapse and extend nodes by level.\n- Collapse and expand all nodes.\n- Can perform 2D scrolling without custom layout.\n</code></pre> <p>We are open to any new feature request, bug fix request, and pull request.</p>"},{"location":"add-to-xml/","title":"Add to XML","text":"<p>TreeView didn't require any custom views or custom setup all you need is just a Recyclerview</p> <pre><code>&lt;androidx.recyclerview.widget.RecyclerView \n    android:id=\"@+id/recycler_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" /&gt;\n</code></pre> <p>If you want to support 2D Scrolling you should add your RecyclerView in HorizontalScrollView</p> <pre><code>&lt;HorizontalScrollView\n    android:fillViewport=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"&gt;\n\n    &lt;androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:scrollbars=\"vertical\" /&gt;\n&lt;/HorizontalScrollView&gt;\n</code></pre> <p>You can Change the scroll bar color and size like any other RecyclerView</p>"},{"location":"full-example/","title":"Full example","text":"<p>1 - Setup your XML and make it support 2D Scrolling</p> <pre><code>&lt;HorizontalScrollView\n    android:fillViewport=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"&gt;\n\n    &lt;androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:scrollbars=\"vertical\" /&gt;\n&lt;/HorizontalScrollView&gt;\n</code></pre> <p>2 - Create a custom View Holder for your Tree Node</p> <pre><code>public class CustomViewHolder extends TreeViewHolder {\n\n    public CustomViewHolder(@NonNull View itemView) {\n        super(itemView);\n    }\n\n    @Override\n    public void bindTreeNode(TreeNode node) {\n        super.bindTreeNode(node);\n        // Here you can bind your node and check if it selected or not\n    }\n}\n</code></pre> <p>3 - Create View Holder Factory to bind list item layouts with their ViewHolders</p> <pre><code>TreeViewHolderFactory factory = (v, layout) -&gt; {\n    if (layout == R.layout.list_item_one) return new CustomViewHolderOne(v);\n    else if (layout == R.layout.list_item_two) return new CustomViewHolderTwo(v);\n    else return new CustomViewHolderThree(v);\n};\n</code></pre> <p>If you have only one view holder you can declare it in one line like this</p> <pre><code>TreeViewHolderFactory factory = (v, layout) -&gt; new CustomViewHolderOne(v);\n</code></pre> <p>4 - Create a TreeViewAdapter instance and set it to the recyclerview</p> <pre><code>TreeViewAdapter treeViewAdapter = new TreeViewAdapter(factory);\nrecyclerView.setAdapter(treeViewAdapter);\n</code></pre> <p>5 - Build your Tree nodes and add it to the adapter</p> <pre><code>TreeNode root1 = new TreeNode(\"Root1\", R.layout.list_item_root);\nroot1.addChild(new TreeNode(\"Child1\", R.layout.list_item_child));\nroot1.addChild(new TreeNode(\"Child2\", R.layout.list_item_child));\n\nList&lt;TreeNode&gt; roots = new ArrayList&lt;&gt;();\nroots.add(root1);\n\ntreeViewAdapter.updateTreeNodes(roots);\n</code></pre> <p>Don't forget to setup the RecyclerView layout manager</p> <pre><code>recyclerView.setLayoutManager(LinearLayoutManager(this));\n</code></pre>"},{"location":"install/","title":"Install","text":"<p>You can install TreeView easily from Maven Central</p> <pre><code>implementation 'io.github.amrdeveloper:treeview:1.2.0'\n</code></pre>"},{"location":"treenode-manager/","title":"TreeNode Manager","text":"<p>Almost all of the TreeNode manipulation features are implemented on TreeNodeManager, this help us to test, extend and change the implementation for some features if it needed.</p> <p>By Default TreeViewAdapter depend on the Default TreeNodeManager class but if you want a custom implementation, you can easily create a new manager class that extend TreeNodeManager and pass it on TreeViewAdapter constructor</p> <pre><code>TreeViewAdapter adapter = new TreeViewAdapter(factory, customTreeNodeManager);\n</code></pre> <p>The TreeNodeManager class has many method to help easily provide features.</p> <p>Set the current visible tree nodes</p> <pre><code>public void setTreeNodes(List&lt;TreeNode&gt; treeNodes)\n</code></pre> <p>Get the Current visible Tree nodes</p> <pre><code>public List&lt;TreeNode&gt; getTreeNodes()\n</code></pre> <p>Get TreeNode by index</p> <pre><code>public TreeNode get(int index)\n</code></pre> <p>Add new TreeNode</p> <pre><code>public boolean addNode(TreeNode node)\n</code></pre> <p>Clear the current TreeNodes and add new TreeNodes</p> <pre><code>public void updateNodes(List&lt;TreeNode&gt; newNodes)\n</code></pre> <p>Remove TreeNode</p> <pre><code>public boolean removeNode(TreeNode node)\n</code></pre> <p>Clear all TreeNodes</p> <pre><code>public void clearNodes()\n</code></pre> <p>Get the current TreeNodes size</p> <pre><code>public int size()\n</code></pre> <p>Collapsing TreeNode</p> <pre><code>public int collapseNode(TreeNode node)\n</code></pre> <p>Expanding TreeNode</p> <pre><code>public int expandNode(TreeNode node)\n</code></pre> <p>Collapsing TreeNode full branch</p> <pre><code>public int collapseNodeBranch(TreeNode node)\n</code></pre> <p>Expanding TreeNode full branch</p> <pre><code>public int expandNodeBranch(TreeNode node)\n</code></pre> <p>Expanding TreeNode branch until specific level</p> <pre><code>public void expandNodeToLevel(TreeNode node, int level)\n</code></pre> <p>Expanding all tree nodes branches to until specific level</p> <pre><code>public void expandNodesAtLevel(int level)\n</code></pre> <p>Collapsing all nodes in the tree with their children</p> <pre><code>public void collapseAll()\n</code></pre> <p>Expanding all nodes in the tree with their children</p> <pre><code>public void expandAll()\n</code></pre> <p>If you want more information about them, please check the javadoc.</p>"},{"location":"treenode/","title":"TreeNode","text":"<p>Every item on our Tree is a TreeNode, and you can use the default one or create your own custom tree node if needed.</p> <p>To create a Default Tree Node</p> <pre><code>TreeNode node = new TreeNode(value, R.layout.list_item);\n</code></pre> <p>Once it created it will be at level 0 with no children and no parent.</p> <p>Maybe in some cases you want to create a custom TreeNode, all you need is to create a class that extend it  and add your own functions and variables, please check the log example for practical example.</p> <pre><code>public class CustomTreeNode extends TreeNode {\n\n    public CustomTreeNode(Object value, int layoutId) {\n        super(message, layoutId);\n    }\n}\n</code></pre> <p>TreeNode has many method to set and get values</p> <p>To add new child</p> <pre><code>treeNode.addChild(TreeNode child)\n</code></pre> <p>Change the value</p> <pre><code>treeNode.setValue(Object value);\n</code></pre> <p>Get the current value</p> <pre><code>Object value = treeNode.getValue();\n</code></pre> <p>Get the node parent</p> <pre><code>TreeNode parent = treeNode.getParent();\n</code></pre> <p>To make the node expanded or collapsed</p> <pre><code>treeNode.setExpanded(isExpanded);\n</code></pre> <p>Check if it expanded</p> <pre><code>boolean isExpanded = treeNode.isExpanded();\n</code></pre> <p>Check if it selected or not</p> <pre><code>boolean isSelected = treeNode.isSelected();\n</code></pre> <p>Get the node level</p> <pre><code>int level = treeNode.getLevel();\n</code></pre>"},{"location":"treeview-adapter/","title":"TreeView Adapter","text":"<p>TreeView come with it own Adapter to easily provide tree view features on any RecyclerView.</p> <p>TreeViewAdapter class can be created with 2 options, first with ViewHoldersFactory and it will use the default TreeNodeManager</p> <pre><code>TreeViewAdapter adapter = new TreeViewAdapter(factory);\n</code></pre> <p>The other option is used if you have a custom TreeNodeManager.</p> <pre><code>TreeViewAdapter adapter = new TreeViewAdapter(factory, customTreeNodeManager);\n</code></pre> <p>Update the list of tree nodes</p> <pre><code>public void updateTreeNodes(List&lt;TreeNode&gt; treeNodes)\n</code></pre> <p>Delete all tree nodes</p> <pre><code>public void clearTreeNodes()\n</code></pre> <p>Collapsing node and all of his children</p> <pre><code>public void collapseNode(TreeNode node)\n</code></pre> <p>Expanding node and all of his children</p> <pre><code>public void expandNode(TreeNode node)\n</code></pre> <p>Collapsing full node branches</p> <pre><code>public void collapseNodeBranch(TreeNode node)\n</code></pre> <p>Expanding node full branches</p> <pre><code>public void expandNodeBranch(TreeNode node)\n</code></pre> <p>Expanding one node branch to until specific level</p> <pre><code>public void expandNodeToLevel(TreeNode node, int level)\n</code></pre> <p>Expanding all tree nodes branches to until specific level</p> <pre><code>public void expandNodesAtLevel(int level)\n</code></pre> <p>Collapsing all nodes in the tree with their children</p> <pre><code>public void collapseAll()\n</code></pre> <p>Expanding all nodes in the tree with their children</p> <pre><code>public void expandAll()\n</code></pre> <p>Set the current visible tree nodes and notify all data changed</p> <pre><code>public void setTreeNodes(List&lt;TreeNode&gt; treeNodes)\n</code></pre> <p>Get the Current visible Tree nodes</p> <pre><code>public List&lt;TreeNode&gt; getTreeNodes()\n</code></pre> <p>Get the current selected tree node, null of no tree node selected</p> <pre><code>public TreeNode getSelectedNode()\n</code></pre> <p>Register a callback to be invoked when this TreeNode is clicked</p> <pre><code>public void setTreeNodeClickListener(OnTreeNodeClickListener listener)\n</code></pre> <p>or using Lambda</p> <pre><code>treeViewAdapter.setTreeNodeClickListener((treeNode, nodeView) -&gt; {\n\n});\n</code></pre> <p>Register a callback to be invoked when this TreeNode is clicked and held</p> <pre><code>public void setTreeNodeLongClickListener(OnTreeNodeLongClickListener listener)\n</code></pre> <p>or using Lambda</p> <pre><code>treeViewAdapter.setTreeNodeLongClickListener((treeNode, nodeView) -&gt; {\n    return true;\n});\n</code></pre>"},{"location":"treeview-json/","title":"Build TreeView from Json Data","text":"<p>In Some cases you want to receive the tree nodes from API or from local files and you need to build a nested TreeView, you can easily do that with GSON library.</p> <p>For example if you want to build a nested nodes for example node with value First will have one child, which is Second and Second will have Third, and your response look like this, you can define different schema.</p> <pre><code>[\n  {\n     \"id\": 1,\n     \"value\": \"First\",\n     \"layout\": \"list_item_node\",\n     \"parentId\": -1\n  },\n  {\n     \"id\": 2,\n     \"value\": \"Second\",\n     \"layout\": \"list_item_node\",\n     \"parentId\": 1\n  },\n  {\n     \"id\": 3,\n     \"value\": \"Third\",\n     \"layout\": \"list_item_node\",\n     \"parentId\": 2\n  }\n]\n</code></pre> <p>First we will create a class type called TreeNodes which will save a list of tree nodes.</p> <pre><code>public class TreeNodes {\n    private List&lt;TreeNode&gt; treeNodes;\n\n    public TreeNodes(List&lt;TreeNode&gt; nodes) {\n        this.treeNodes = nodes;\n    }\n\n    public List&lt;TreeNode&gt; getTreeNodes() {\n        return treeNodes;\n    }\n}\n</code></pre> <p>then we need to create a custom JsonDeserializer that can parse our response</p> <pre><code>public class TreeNodeParser implements JsonDeserializer&lt;TreeNodes&gt; {\n\n    @Override\n    public TreeNodes deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        List&lt;TreeNode&gt; roots = new ArrayList&lt;&gt;();\n        List&lt;TreeNode&gt; allNodes = new ArrayList&lt;&gt;();\n        Map&lt;Integer, Integer&gt; parentIndexMap = new HashMap&lt;&gt;();\n        JsonArray jsonArray = json.getAsJsonArray();\n        for (int i = 0; i &lt; jsonArray.size(); i++) {\n            JsonObject treeNodeObject = (JsonObject) jsonArray.get(i);\n            Object value = treeNodeObject.get(\"value\").getAsString();\n            int nodeId = treeNodeObject.get(\"id\").getAsInt();\n            int parentId = treeNodeObject.get(\"parentId\").getAsInt();\n\n            // You can easily support dynamic layout id by et layout value\n            TreeNode treeNode = new TreeNode(value, R.layout.list_item_file);\n\n            Integer index = parentIndexMap.get(parentId);\n            if (index != null) {\n                allNodes.get(index).addChild(treeNode);\n            } else {\n                roots.add(treeNode);\n            }\n            allNodes.add(treeNode);\n            parentIndexMap.put(nodeId, allNodes.size() - 1);\n        }\n        return new TreeNodes(roots);\n    }\n}\n</code></pre> <p>Then you can use Gson Library here to get TreeNodes instance and pass it to the TreeViewAdapter</p> <pre><code>Gson gson = new GsonBuilder()\n        .registerTypeAdapter(TreeNodes.class, new TreeNodeParser())\n        .create();\n\nTreeNodes treeNodes = gson.fromJson(jsonData, TreeNodes.class);\ntreeViewAdapter.updateTreeNodes(treeNodes.getTreeNodes());\n</code></pre> <p>This is a simple example you can customize it and support many features.</p>"},{"location":"view-holders/","title":"View Holders","text":"<p>To create a View Holder for your List item you should create a class that extend our TreeViewHolder</p> <pre><code>public class CustomViewHolder extends TreeViewHolder {\n\n    public CustomViewHolder(@NonNull View itemView) {\n        super(itemView);\n    }\n\n    @Override\n    public void bindTreeNode(TreeNode node) {\n        super.bindTreeNode(node);\n        // Here you can bind your node and check if it selected or not\n    }\n}\n</code></pre> <p>And you need to create a factory that provide view holder depend on the list item layout</p> <p>Simple Factory with 1 View holder</p> <pre><code>TreeViewHolderFactory factory = (v, layout) -&gt; new CustomViewHolderOne(v);\n</code></pre> <p>Factory with 3 View Holders <pre><code>TreeViewHolderFactory factory = (v, layout) -&gt; {\n    if (layout == R.layout.list_item_one) return new CustomViewHolderOne(v);\n    else if (layout == R.layout.list_item_two) return new CustomViewHolderTwo(v);\n    else return new CustomViewHolderThree(v);\n};\n</code></pre></p> <p>This factory instance will passed to the TreeViewAdapter when it created</p> <pre><code>TreeViewAdapter treeViewAdapter = new TreeViewAdapter(factory);\n</code></pre>"},{"location":"contribution/documentation/","title":"Documentation","text":"<ul> <li> <p>All the documentations are written in Mark Down files in docs directory</p> </li> <li> <p>We use Material MkDocs to generate the website</p> </li> </ul>"},{"location":"contribution/documentation/#how-to-edit-the-docs","title":"How to edit the docs?","text":"<ul> <li> <p>Clone the repository <pre><code>git clone https://github.com/amrdeveloper/treeview.git\n</code></pre></p> </li> <li> <p>Enter the docs directory <pre><code>cd docs\n</code></pre></p> </li> <li> <p>Edit the file, you can see the output live on the website using mkdocs serve, <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Open docs website locally to see the output. <pre><code>http://127.0.0.1:8000/treeview\n</code></pre></p> </li> <li> <p>After finishing the modification, commit and make Pull request.</p> </li> </ul>"},{"location":"contribution/report/","title":"Report Issue","text":"<ul> <li> <p>You're most welcome to report any issue or corner case, but first make sure this issue isn't reported before on the issues list on Github Repository.</p> </li> <li> <p>If it unique, that's very good you should report it by creating new issue and explained when exactly this issue appear and it will be amazing if you can add code example.</p> </li> <li> <p>If you want also to work on this issue, tell us in the end that you can do it and we will start discussion about it.</p> </li> <li> <p>Feel free to share your ideas and hints.</p> </li> </ul>"},{"location":"contribution/suggestion/","title":"Suggest New Feature","text":"<ul> <li> <p>I believe that everyone can add new value to TreeView and any contribution will be very helpful.</p> </li> <li> <p>If you see that any part of this tool can be improved, feel free to make new issue with some information for example which part? code, docs...etc and what is your suggestion to improve it? also do you want to work on this suggestion?</p> </li> <li> <p>After submitting your issue we will have a discussion and brainstorm about this suggestion to see what is the best way to implement it.</p> </li> </ul>"}]}